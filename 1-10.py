# If we list all the natural numbers below 10 that are multiples of 3 or 5, we
# get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

def mult3or5sum(r):
    return sum([x for x in range(r) if (x%3==0 or x%5==0)])

# print(mult3or5sum(1000))

# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

def evenFibonacci(max):
    prev = 1
    cur = 2
    sum = 0
    while cur < max:
        if cur%2 == 0:
            sum += cur
        cur += prev
        prev = cur - prev
    return sum

# print(evenFibonacci(4000000))

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143?

import math

def largestPrimeFactor(n):
    res = 0
    for i in range(3, int(math.sqrt(n)+1), 2):
        while n % i == 0:
            n /= i
            res = i
    return n if n != 1 else res

# print(largestPrimeFactor(600851475143))

# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91x99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def palindromic(digits):
    pal = 0
    for n in reversed(range(10**(digits-1), 10**digits)):
        for m in reversed(range(10**(digits-1), n+1)):
            p = n*m
            if (str(p) == str(p)[::-1] and p > pal):
                pal = p
    return pal

# print(palindromic(3))

# 2520 is the smallest number that can be divided by each of the numbers from 1
# to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the
# numbers from 1 to 20?

# Idea is: least common multiple of [1..10] is 2520. To find LCM of [1..11] we
# multiply 2520 by the smallest x such that (2520*x) % 11 == 0. Repeat til 20.
# Except we start with 1 instead of 2520 for reusability
def evenlyDivisible(m):
    res = 1
    for n in range(2, m+1):
        prev = res
        while res % n != 0:
            res += prev
    return res

# print(evenlyDivisible(20))

# The sum of the squares of the first ten natural numbers is,
# 1²+2²+...+10²=385.
# The square of the sum of the first ten natural numbers is,
# (1+2+...+10)² = 55² = 3025.
# Hence the difference between the sum of the squares of the first ten natural
# numbers and the square of the sum is 3025 - 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred
# natural numbers and the square of the sum.

def diffSumSquare(n):
    return abs(sum([i**2 for i in range(1, n+1)]) - sum(range(1, n+1))**2)

# print(diffSumSquare(100))

# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
# that the 6th prime is 13.
# What is the 10001st prime number?

# Sieve of Eratosthenes: for all integers n up to 1000000, start at 2 and
# remove all its multiples, the next number not crossed out is the next prime.
# Do this for every number up to 1000000 and only primes will remain.
def SieveOfEratosthenes():
 
    n = 1000000
    primes = []
    prime = [True for i in range(n + 1)]
     
    p = 2
    while (p * p <= n):
        # If prime[p] is not changed,
        # then it is a prime
        if (prime[p] == True):
            # Update all multiples of p
            for i in range(p * p, n + 1, p):
                prime[i] = False
        p += 1
       
    for p in range(2, n + 1):
        if prime[p]:
            primes.append(p)
    return primes[10000]

# print(SieveOfEratosthenes())
# The four adjacent digits in the 1000-digit number that have the greatest product
# are 9x9x8x9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that have the greatest
# product. What is the value of this product?

def thirteenProduct():
    n = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
    res = 0
    for i in range(len(n)-13):
        prod = math.prod([int(n[z]) for z in range(i, i+13)])
        if prod > res:
            res = prod 
    return res

# print(thirteenProduct())

# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
# a² + b² = c².
# For example, 3² + 4² = 9 + 16 = 25 = 5².
# There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find
# the product abc.

# Euclid's formula: a = m² - n², b = 2mn, c = m² + n²
# def pythagoreanTriplet():


